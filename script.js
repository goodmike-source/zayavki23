// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï ===
const tableBody = document.getElementById("table-body");
const statusFilter = document.getElementById("status-filter");
const searchBox = document.getElementById("search-box");
const modal = document.getElementById("modal");
const modalBody = document.getElementById("modal-body");
const spanClose = document.querySelector(".close");
let sortEnabled = true; // üü¢ –¥–æ–±–∞–≤–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
let currentView = "table"; // table | cards

// === –ö–ù–û–ü–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò ===
const sortToggle = document.createElement("button");
sortToggle.id = "sort-toggle";
sortToggle.textContent = "üîΩ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É: –í–ö–õ";
sortToggle.style.margin = "10px";
document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("controls").appendChild(sortToggle);
});
sortToggle.onclick = () => {
  sortEnabled = !sortEnabled;
  sortToggle.textContent = sortEnabled
    ? "üîΩ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É: –í–ö–õ"
    : "‚¨ú –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω—É: –í–´–ö–õ";
  renderData(filterData(loadData()));
};

// === –î–ê–ù–ù–´–ï ===
const defaultData = [
  {
    id: 1,
    date: "19.07.2025",
    client: "–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
    product: "–®—É—Ä—É–ø–æ–≤—ë—Ä—Ç Deko",
    serviceId: "–°–¶-001",
    status: "–ü—Ä–∏–Ω—è—Ç",
    updateDate: "19.07.2025",
    comment: "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ",
    deadline: "25.07.2025",
    scAddress: "—É–ª. –°–µ—Ä–≤–∏—Å–Ω–∞—è, 15",
    scPhone: "+79991112233",
    clientPhone: "+79998887766",
    manager: "–ö–æ–∑—è–µ–≤ –í.–°.",
    urgent: true,
    history: [],
    images: { product: "", serial: "", act: "" }
  }
];

function saveData(data) {
  localStorage.setItem("requestData", JSON.stringify(data));
}
function loadData() {
  const saved = localStorage.getItem("requestData");
  return saved ? JSON.parse(saved) : defaultData;
}

// === BADGES ===
function getStatusBadge(status) {
  switch (status) {
    case "–ü—Ä–∏–Ω—è—Ç": return `<span class="badge badge-green"><i class="fa-solid fa-circle-check"></i> –ü—Ä–∏–Ω—è—Ç</span>`;
    case "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω": return `<span class="badge badge-blue"><i class="fa-solid fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>`;
    case "–ù–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ": return `<span class="badge badge-orange"><i class="fa-solid fa-stethoscope"></i> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</span>`;
    case "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ": return `<span class="badge badge-purple"><i class="fa-solid fa-box"></i> –ì–æ—Ç–æ–≤–æ</span>`;
    case "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫": return `<span class="badge badge-yellow"><i class="fa-solid fa-phone"></i> –ó–≤–æ–Ω–æ–∫</span>`;
    case "–û—Ç–∫–∞–∑–∞–Ω–æ": return `<span class="badge badge-red"><i class="fa-solid fa-ban"></i> –û—Ç–∫–∞–∑–∞–Ω–æ</span>`;
    default: return `<span class="badge"><i class="fa-solid fa-circle-info"></i> ${status}</span>`;
  }
}

// === –î–ï–î–õ–ê–ô–ù–´ ===
function getDeadlineClass(deadlineStr) {
  if (!deadlineStr) return { cls: "", tip: "" };
  const [d, m, y] = deadlineStr.split(".");
  const deadline = new Date(`${y}-${m}-${d}`);
  const todayMid = new Date(); todayMid.setHours(0,0,0,0);
  const tomorrowMid = new Date(todayMid); tomorrowMid.setDate(tomorrowMid.getDate() + 1);

  if (deadline < todayMid) return { cls: "overdue", tip: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ" };
  if (deadline.getTime() === todayMid.getTime()) return { cls: "today", tip: "–î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è" };
  if (deadline.getTime() === tomorrowMid.getTime()) return { cls: "warning", tip: "–î–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞" };
  return { cls: "", tip: "" };
}

// === –†–ï–ù–î–ï–† –¢–ê–ë–õ–ò–¶–´ ===
function renderTable(data) {
  tableBody.innerHTML = "";
  let draggedIndex = null;

  data.forEach((item, index) => {
    const row = document.createElement("tr");
    row.setAttribute("draggable", "true");
    row.dataset.index = index;
    const deadlineInfo = getDeadlineClass(item.deadline);

    row.innerHTML = `
      <td>${index + 1}</td>
      <td>${item.date}</td>
      <td>${item.client}</td>
      <td>${item.product}</td>
      <td>${item.serviceId}</td>
      <td class="status">${getStatusBadge(item.status)}</td>
      <td>${item.updateDate}</td>
      <td>${item.comment}</td>
      <td class="${deadlineInfo.cls}" title="${deadlineInfo.tip}">${item.deadline || ""}</td>
      <td>
        <select class="status-select">
          ${["–ü—Ä–∏–Ω—è—Ç", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ù–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫", "–û—Ç–∫–∞–∑–∞–Ω–æ"]
            .map(s => `<option ${item.status === s ? "selected" : ""}>${s}</option>`).join("")}
        </select>
        <button class="update-btn">OK</button>
        <button class="details-btn">üîç</button>
        <button class="delete-btn">üóëÔ∏è</button>
      </td>
    `;

    // drag & drop
    row.addEventListener("dragstart", e => { draggedIndex = index; row.style.opacity = "0.4"; e.dataTransfer.effectAllowed = "move"; });
    row.addEventListener("dragover", e => { e.preventDefault(); row.style.borderTop = "2px solid #007bff"; });
    row.addEventListener("dragleave", () => row.style.borderTop = "");
    row.addEventListener("drop", e => {
      e.preventDefault(); row.style.borderTop = "";
      if (draggedIndex !== null && draggedIndex !== index) {
        const draggedItem = data[draggedIndex];
        data.splice(draggedIndex, 1);
        data.splice(index, 0, draggedItem);
        saveData(data);
        renderTable(filterData(data));
      }
    });
    row.addEventListener("dragend", () => row.style.opacity = "1");

    // update status
    row.querySelector(".update-btn").onclick = () => {
      const newStatus = row.querySelector(".status-select").value;
      const now = new Date();
      item.status = newStatus;
      item.updateDate = now.toLocaleDateString("ru-RU");
      item.history.push(`[${now.toLocaleString("ru-RU")}] –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${newStatus}"`);
      saveData(data);
      renderTable(filterData(data));
    };

    // details
    row.querySelector(".details-btn").onclick = () => openModal(item, data);

    // delete
    row.querySelector(".delete-btn").onclick = () => {
      if (confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?")) {
        row.classList.add("fade-out");
        setTimeout(() => {
          data.splice(index, 1);
          saveData(data);
          renderTable(filterData(data));
        }, 300);
      }
    };

    tableBody.appendChild(row);
  });

  updateStatusSummary(data);
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
function updateStatusSummary(data) {
  const counts = { "–ü—Ä–∏–Ω—è—Ç":0, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω":0, "–ù–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ":0, "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ":0, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫":0, "–û—Ç–∫–∞–∑–∞–Ω–æ":0 };
  data.forEach(d => counts[d.status]++);
  document.getElementById("status-summary").innerText =
    `üü¢ –ü—Ä–∏–Ω—è—Ç: ${counts["–ü—Ä–∏–Ω—è—Ç"]} | üõ´ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${counts["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"]} | üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${counts["–ù–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ"]} | üì¶ –ì–æ—Ç–æ–≤–æ: ${counts["–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"]} | ‚òé –ó–≤–æ–Ω–æ–∫: ${counts["–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫"]} | ‚ùå –û—Ç–∫–∞–∑: ${counts["–û—Ç–∫–∞–∑–∞–Ω–æ"]}`;
}

// === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===
function openModal(item, data) {
  if (!item.history) item.history = [];

  modalBody.innerHTML = `
    <div class="modal-section">
      <h3>üìå –û—Å–Ω–æ–≤–Ω–æ–µ</h3>
      <label>–ö–ª–∏–µ–Ω—Ç:<input value="${item.client}" id="edit-client" /></label>
      <label>–¢–æ–≤–∞—Ä:<input value="${item.product}" id="edit-product" /></label>
      <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:<input value="${item.comment}" id="edit-comment" /></label>
      <label>–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:<input value="${item.serviceId}" id="edit-serviceId" /></label>
      <label>–î–µ–¥–ª–∞–π–Ω:<input type="date" value="${item.deadline ? formatForInput(item.deadline) : ''}" id="edit-deadline" /></label>
    </div>

    <div class="modal-section">
      <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
      <label>–ê–¥—Ä–µ—Å –°–¶:<input value="${item.scAddress || ""}" id="edit-scAddress" /></label>
      <label>–¢–µ–ª–µ—Ñ–æ–Ω –°–¶:<input value="${item.scPhone || ""}" id="edit-scPhone" /></label>
      <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:<input value="${item.clientPhone || ""}" id="edit-clientPhone" /></label>
      ${item.clientPhone ? `<a href="tel:${item.clientPhone}" class="call-btn">üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å</a>` : ""}
    </div>

    <div class="modal-section">
      <h3>üìö –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
      <ul class="history-list">${item.history.map(h => `<li>${h}</li>`).join("") || "<li>–ü–æ–∫–∞ –Ω–µ—Ç</li>"}</ul>
    </div>

    <div class="modal-actions">
      <button id="save-modal" class="primary-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>
  `;

  modal.style.display = "block";
  document.getElementById("save-modal").onclick = () => {
    const now = new Date().toLocaleString("ru-RU");
    const newData = {
      client: document.getElementById("edit-client").value,
      product: document.getElementById("edit-product").value,
      comment: document.getElementById("edit-comment").value,
      serviceId: document.getElementById("edit-serviceId").value,
      deadline: document.getElementById("edit-deadline").value ? formatForDisplay(document.getElementById("edit-deadline").value) : "",
      scAddress: document.getElementById("edit-scAddress").value,
      scPhone: document.getElementById("edit-scPhone").value,
      clientPhone: document.getElementById("edit-clientPhone").value
    };

    for (let key in newData) {
      if (item[key] !== newData[key]) {
        item.history.push(`[${now}] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ ${key}`);
        item[key] = newData[key];
      }
    }

    saveData(data);
    renderTable(filterData(data));
    modal.style.display = "none";
  };
}
function formatForInput(dateStr) { const [d,m,y] = dateStr.split("."); return `${y}-${m}-${d}`; }
function formatForDisplay(dateStr) { const [y,m,d] = dateStr.split("-"); return `${d}.${m}.${y}`; }
spanClose.onclick = () => modal.style.display = "none";
window.onclick = e => { if (e.target === modal) modal.style.display = "none"; };

// === –§–ò–õ–¨–¢–† ===
function filterData(data) {
  const statusVal = statusFilter.value;
  const searchText = searchBox.value.toLowerCase();
  return data.filter(item => {
    const matchesStatus = !statusVal || item.status === statusVal;
    const matchesSearch = item.client.toLowerCase().includes(searchText) || item.product.toLowerCase().includes(searchText);
    return matchesStatus && matchesSearch;
  });
}
statusFilter.onchange = () => renderTable(filterData(loadData()));
searchBox.oninput = () => renderTable(filterData(loadData()));

// === –î–û–ë–ê–í–õ–ï–ù–ò–ï ===
document.getElementById("add-request-btn").onclick = () => {
  const client = document.getElementById("new-client").value.trim();
  const product = document.getElementById("new-product").value.trim();
  const serviceId = document.getElementById("new-service-id").value.trim();
  const comment = document.getElementById("new-comment").value.trim();

  if (!client || !product) { alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∏–Ω–∏–º—É–º –ø–æ–ª—è –ö–ª–∏–µ–Ω—Ç –∏ –¢–æ–≤–∞—Ä."); return; }

  const data = loadData();
  const now = new Date().toLocaleDateString("ru-RU");
  const newId = data.length ? Math.max(...data.map(d => d.id)) + 1 : 1;

  const newItem = {
    id: newId, date: now, client, product, serviceId,
    status: "–ü—Ä–∏–Ω—è—Ç", updateDate: now, comment,
    deadline: "", scAddress: "", scPhone: "", clientPhone: "",
    manager: "", urgent: false,
    history: [`[${now}] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º`],
    images: { product: "", serial: "", act: "" }
  };

  data.push(newItem); saveData(data); renderTable(filterData(data));
  document.getElementById("new-client").value = "";
  document.getElementById("new-product").value = "";
  document.getElementById("new-service-id").value = "";
  document.getElementById("new-comment").value = "";
};

// === –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê ===
const themeToggle = document.getElementById("theme-toggle");
const savedTheme = localStorage.getItem("theme");
if (savedTheme === "dark") { document.body.classList.add("dark-theme"); themeToggle.textContent = "‚òÄÔ∏è"; }
themeToggle.onclick = () => {
  document.body.classList.toggle("dark-theme");
  const isDark = document.body.classList.contains("dark-theme");
  localStorage.setItem("theme", isDark ? "dark" : "light");
  themeToggle.textContent = isDark ? "‚òÄÔ∏è" : "üåô";
};

// === –≠–ö–°–ü–û–†–¢ / –ò–ú–ü–û–†–¢ ===
document.getElementById("export-btn").onclick = () => {
  const data = loadData();
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "zayavki.json"; a.click(); URL.revokeObjectURL(url);
};
document.getElementById("import-btn").onclick = () => document.getElementById("import-file").click();
document.getElementById("import-file").onchange = e => {
  const file = e.target.files[0]; if (!file) return;
  const reader = new FileReader();
  reader.onload = () => {
    try { const data = JSON.parse(reader.result); saveData(data); renderTable(filterData(data)); alert("–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"); }
    catch { alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞."); }
  };
  reader.readAsText(file);
};

// === –í–ò–î (–¢–ê–ë–õ–ò–¶–ê / –ö–ê–†–¢–û–ß–ö–ò) ===
document.getElementById("toggle-view-btn").onclick = () => {
  currentView = currentView === "table" ? "cards" : "table";
  document.getElementById("toggle-view-btn").textContent = currentView === "table" ? "üìä –¢–∞–±–ª–∏—Ü–∞" : "üóÇÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏";
  renderData(filterData(loadData()));
};
function renderData(data) {
  const table = document.getElementById("status-table");
  const cards = document.getElementById("cards-container");
  if (currentView === "table") { table.style.display = "table"; cards.style.display = "none"; renderTable(data); }
  else { table.style.display = "none"; cards.style.display = "grid"; renderCards(data); }
}
function renderCards(data) {
  let container = document.getElementById("cards-container"); container.innerHTML = "";
  data.forEach((item, index) => {
    const card = document.createElement("div"); card.className = "card";
    card.innerHTML = `
      ${getStatusBadge(item.status)}
      <h3>${item.client}</h3>
      <p><strong>üì¶ –¢–æ–≤–∞—Ä:</strong> ${item.product}</p>
      <p><strong>‚Ññ:</strong> ${item.serviceId}</p>
      <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${item.comment}</p>
      <p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${item.deadline || "‚Äî"}</p>
      <div class="card-actions">
        <button class="details-btn">üîç</button>
        <button class="delete-btn">üóëÔ∏è</button>
      </div>`;
    card.querySelector(".details-btn").onclick = () => openModal(item, data);
    card.querySelector(".delete-btn").onclick = () => { if (confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?")) { data.splice(index, 1); saveData(data); renderData(filterData(data)); } };
    container.appendChild(card);
  });
  updateStatusSummary(data);
}

// === –ü–ï–†–í–´–ô –†–ï–ù–î–ï–† ===
renderData(filterData(loadData()));

function renderData(data) {
  const table = document.getElementById("status-table");
  const cards = document.getElementById("cards-container");

  if (currentView === "table") {
    table.style.display = "table";
    cards.style.display = "none";
    renderTable(data);
  } else {
    table.style.display = "none";
    cards.style.display = "grid";
    renderCards(data);
  }
}

function renderCards(data) {
  let container = document.getElementById("cards-container");
  if (!container) {
    container = document.createElement("div");
    container.id = "cards-container";
    container.className = "cards-grid";
    document.querySelector(".container").appendChild(container);
  }
  container.innerHTML = "";

  data.forEach((item, index) => {
    const card = document.createElement("div");
    card.className = "card";

    card.innerHTML = `
  ${getStatusBadge(item.status)}
  <h3>${item.client}</h3>
  <p><strong>üì¶ –¢–æ–≤–∞—Ä:</strong> ${item.product}</p>
  <p><strong>‚Ññ:</strong> ${item.serviceId}</p>
  <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${item.comment}</p>
  <p><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${item.deadline || "‚Äî"}</p>
  <div class="card-actions">
    <button class="details-btn">üîç</button>
    <button class="delete-btn">üóëÔ∏è</button>
  </div>
`;

    // --- –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ ---
    card.querySelector(".details-btn").onclick = () => openModal(item, data);
    card.querySelector(".delete-btn").onclick = () => {
      if (confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?")) {
        data.splice(index, 1);
        saveData(data);
        renderData(filterData(data));
      }
    };

    container.appendChild(card);
  });

  updateStatusSummary(data);
}